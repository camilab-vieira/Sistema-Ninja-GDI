------------------------
-------CONSULTAS--------
------------------------


-- NOME DAS PESSOAS QUE REQUISITARAM MISSAO COM VALOR MAIOR QUE 50000 E O MAIOR VALOR DE UMA MISSAO REQUISITADA
-- GROUP BY / HAVING
-- JUNCAO INTERNA
SELECT P.NOME, MAX(M.VALOR)
FROM PESSOA P INNER JOIN MISSAO M ON P.CADASTRO = M.CADASTRO
GROUP BY(P.NOME)
HAVING MAX(M.VALOR) > 50000

-- NOME DE TODAS AS PESSOAS E CODIGO DAS MISSOES DE QUEM SOLICITOU
-- JUNÇÃO EXTERNA
SELECT P.NOME, M.CODIGO
FROM PESSOA P LEFT OUTER JOIN MISSAO M ON P.CADASTRO = M.CADASTRO


-- MISSOES DE CLASSE B QUE POSSUEM VALOR MAIOR QUE ALGUMA MISSAO DE CLASSE A
-- SEMI JOIN
-- SUBCONSULTA TABELA
SELECT M.CODIGO
FROM MISSAO M
WHERE M.DIFICULDADE = 'B' AND M.VALOR > ANY (SELECT M2.VALOR
											 FROM MISSAO M2
											 WHERE M2.DIFICULDADE = 'A')

-- CODIGO DAS MISSOES SOLICITADAS POR PESSOAS
-- ANTIJOIN
SELECT M.CODIGO 
FROM MISSAO M
WHERE M.CODIGO NOT IN (SELECT M2.CODIGO
    				   FROM MISSAO M2
    				   WHERE M2.CADASTRO IS NULL)

-- NOME DAS PESSOAS (SEM DUPLICATA) EM QUE O VALOR DA MISSAO FOI MAIOR QUE A MEDIA DOS VALORES
-- SUBCONSULTA ESCALAR
SELECT DISTINCT(P.NOME)
FROM PESSOA P INNER JOIN MISSAO M ON P.CADASTRO = M.CADASTRO
WHERE M.VALOR > (SELECT AVG(M2.VALOR)
    				FROM MISSAO M2)

-- CODIGO DAS MISSOES EM QUE O VALOR E A DIFICULDADE SÃO IGUAIS A DA MISSAO DE CODIGO 3  
-- SUBCONSULTA DO TIPO LINHA
SELECT M.CODIGO
FROM MISSAO M
WHERE (M.VALOR, M.DIFICULDADE) = (SELECT M2.VALOR, M2.DIFICULDADE
    								FROM MISSAO M2
    								WHERE M2.CODIGO = '3');

-- UNIAO DO NOME DOS PAISES E DAS VILAS
-- OPERACAO DE CONJUNTO
	SELECT NOME
    FROM PAIS
UNION
    SELECT NOME
    FROM VILA


------------------------
-------TRIGGERS---------
------------------------


-- TRIGGER DE IDADE
CREATE OR REPLACE TRIGGER TG_IDADE
BEFORE INSERT OR UPDATE OF DATA_NAS ON PESSOA
FOR EACH ROW
BEGIN
  :NEW.IDADE := TRUNC(MONTHS_BETWEEN(SYSDATE, :NEW.DATA_NAS)/12);
END;

-- TRIGGER OBRIGATORIEDADE NINJA_TEM_HABILIDADE
CREATE OR REPLACE TRIGGER TG_OBRIGATORIEDADE_NINJA_TEM_HABILIDADE
AFTER INSERT ON NINJA
FOR EACH ROW
DECLARE
    HABILIDADE NUMBER;
BEGIN
    SELECT COUNT(*) INTO HABILIDADE FROM NINJA_TEM_HABILIDADE WHERE CADASTRO = :NEW.CADASTRO;
    IF HABILIDADE = 0 THEN
        DBMS_OUTPUT.PUT_LINE('INSERÇÃO NECESSÁRIA NA TABELA NINJA_TEM_HABILIDADE');
    END IF;
END;

-- TRIGGER OBRIGATORIEDADE TIME_FAZ_MISSAO
CREATE OR REPLACE TRIGGER TG_OBRIGATORIEDADE_TIME_FAZ_MISSAO
AFTER INSERT ON MISSAO
FOR EACH ROW
DECLARE
    TIME NUMBER;
BEGIN
    SELECT COUNT(*) INTO TIME FROM TIME_FAZ_MISSAO WHERE CODIGO = :NEW.CODIGO;
    IF TIME = 0 THEN
        DBMS_OUTPUT.PUT_LINE('INSERÇÃO NECESSÁRIA NA TABELA TIME_FAZ_MISSAO');
    END IF;
END;

-- TRIGGER OBRIGATORIEDADE TREINADOR_E_TREINADO
CREATE OR REPLACE TRIGGER TG_TREINADOR_E_TREINADO
AFTER INSERT ON NINJA
FOR EACH ROW
DECLARE
    CADASTRO NUMBER;
BEGIN
    SELECT COUNT(*) INTO TIME FROM NINJA_TREINA_NINJA WHERE CADASTRO_NINJA_TREINADO = :NEW.CADASTRO;
    IF CADASTRO = 0 THEN
        DBMS_OUTPUT.PUT_LINE('INSERÇÃO NECESSÁRIA NA TABELA TREINADOR_E_TREINADO');
    END IF;
END;


------------------------
-------PROCEDURES-------
------------------------


-- QUANTAS MISSOES UM TIME FEZ 
CREATE OR REPLACE PROCEDURE QT_MISSOES_TIME(NUM IN NUMBER) IS QT NUMBER;
BEGIN	
	SELECT COUNT(*) INTO QT FROM TIME_FAZ_MISSAO WHERE NUMERO_DO_TIME = NUM;
	DBMS_OUTPUT.PUT_LINE('QUANTIDADE DE MISSOES DO TIME '||NUM||': '||QT);
END;

-- QUANTIDADE DE NINJAS TREINADOS POR KAGES
CREATE OR REPLACE PROCEDURE QT_NINJA_TREINADO_KAGE IS QT NUMBER;
BEGIN	
	SELECT COUNT(*) INTO QT FROM PESSOA WHERE CADASTRO = ANY (SELECT CADASTRO_NINJA_TREINADO FROM NINJA_TREINA_NINJA WHERE CADASTRO_NINJA_TREINADOR = ANY (SELECT CADASTRO FROM KAGE));
	DBMS_OUTPUT.PUT_LINE('QUANTIDADE DE NINJAS TREINADOS POR KAGES: '||QT);
END;

-- QUANTIDADE DE NINJAS QUE ENTRARAM NO TIME NO DIA X
CREATE OR REPLACE PROCEDURE QT_ENTRADA_TIME_DATA(DIA IN DATE) IS QT NUMBER;
BEGIN	
	SELECT COUNT(*) INTO QT FROM NINJA_PARTICIPA_TIME WHERE DATA = DIA AND TIPO_IO = 1;
	DBMS_OUTPUT.PUT_LINE('QUANTIDADE DE NINJAS QUE ENTRARAM EM ALGUM TIME NA DATA ' || DIA ||': '||QT);
END;

--QUANTIDADE DE VEZES QUE A HABILIDADE MAIS FREQUENTE DO TIME X APARECE
CREATE OR REPLACE PROCEDURE QT_HABILIDADE_TIME(NUM IN NUMBER) IS QT NUMBER;
BEGIN	
	 SELECT MAX(NUMERO) INTO QT FROM(SELECT COUNT(H.ID) AS NUMERO , H.TIPO FROM NINJA_TEM_HABILIDADE NTH INNER JOIN HABILIDADE H ON NTH.ID = H.ID WHERE NTH.CADASTRO = ANY(SELECT CADASTRO FROM NINJA_PARTICIPA_TIME WHERE NUMERO_DO_TIME = NUM) GROUP BY H.ID, H.TIPO);
	 DBMS_OUTPUT.PUT_LINE('QUANTIDADE DE VEZES QUE A HABILIDADE MAIS FREQUENTE DO TIME ' || NUM ||': '||QT);
END;


------------------------
-------FUNCTIONS--------
------------------------


-- QUANTIDADE DE MISSOES SOLICITADAS POR PESSOA
CREATE OR REPLACE FUNCTION QT_MISSOES_PESSOA(CAD IN NUMBER) RETURN NUMBER IS QT NUMBER;
BEGIN
    SELECT COUNT(*) INTO QT FROM MISSAO WHERE CADASTRO = CAD;
    RETURN QT;
END;

-- CLASSE DE MISSAO QUE O TIME MAIS FEZ
CREATE OR REPLACE FUNCTION CLASSE_MISSAO(NUM IN NUMBER) RETURN VARCHAR IS RANKING VARCHAR(1);
BEGIN
    SELECT MAX(DIFICULDADE) INTO RANKING FROM(SELECT COUNT(DIFICULDADE), DIFICULDADE FROM (MISSAO M INNER JOIN TIME_FAZ_MISSAO TFM ON M.CODIGO = TFM.CODIGO) WHERE TFM.NUMERO_DO_TIME = NUM GROUP BY DIFICULDADE);
RETURN RANKING;
END;

-- IDADE QUE O NINJA X ENTROU NO SEU PRIMEIRO TIME
CREATE OR REPLACE FUNCTION IDADE_PRIMEIRO_TIME(CAD IN NUMBER) RETURN NUMBER IS IDADE NUMBER;
BEGIN
    SELECT EXTRACT(YEAR FROM MIN(NPT.DATA)) - EXTRACT(YEAR FROM MIN(P.DATA_NAS)) INTO IDADE FROM NINJA_PARTICIPA_TIME NPT INNER JOIN PESSOA P ON NPT.CADASTRO = P.CADASTRO  WHERE NPT.TIPO_IO = 1 AND NPT.CADASTRO = CAD;
	RETURN IDADE;
END;

-- DATA DE NASCIMENTO DA PESSOA DE CADASTRO MAIS ANTIGO QUE SOLICITOU A MISSAO NA DATA X
CREATE OR REPLACE FUNCTION DATA_NAS_SOLICITOU_MISSAO(DATA IN DATE) RETURN DATE IS NASC DATE;
BEGIN
    SELECT DATA_NAS INTO NASC FROM PESSOA WHERE CADASTRO = (SELECT MIN(CADASTRO) FROM MISSAO WHERE DATA_SOLICITACAO = DATA);
	RETURN NASC;
END;

-- --NOME DO PAIS GOVERNADO PELO KAGE X
	CREATE OR REPLACE FUNCTION PAIS_GOV_KAGE(LIDER IN VARCHAR) RETURN VARCHAR IS NOME_PAIS VARCHAR(30);
	BEGIN
	SELECT P.NOME INTO NOME_PAIS FROM PAIS P INNER JOIN KAGE K ON P.ID = K.ID_VILA WHERE K.CADASTRO = (SELECT CADASTRO FROM PESSOA WHERE NOME = LIDER);
		RETURN NOME_PAIS;
	END;