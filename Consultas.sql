-- GROUP BY / HAVING
SELECT P.NOME, MAX(M.VALOR)
FROM PESSOA P INNER JOIN MISSAO M
            ON P.CADASTRO = M.CADASTRO
GROUP BY(P.NOME)
HAVING MAX(M.VALOR) > 5000

-- SUBCONSULTA ESCALAR
SELECT DISTINCT(P.NOME)
FROM PESSOA P INNER JOIN MISSAO M
	ON P.CADASTRO = M.CADASTRO
WHERE M.VALOR > (
    			    SELECT AVG(M2.VALOR)
    				FROM MISSAO M2
				)

-- Missões de classe B que possuem valor maior que alguma missão de classe A, SUBCONSULTA TABELA
SELECT M.CODIGO
FROM MISSAO M
WHERE M.DIFICULDADE = 'B' AND M.VALOR >= ANY (
    											SELECT M.VALOR
    											FROM MISSAO M
    											WHERE M.DIFICULDADE = 'A'
											)

-- Missões que tiveram pessoas solicitantes, ANTIJOIN

SELECT M.CODIGO 
FROM MISSAO M
WHERE M.CODIGO NOT IN (
						SELECT M2.CODIGO
    					FROM MISSAO M2
    					WHERE M2.CADASTRO IS	 NULL
    					)

-- Missões que não tiveram pessoas solicitantes*/
SELECT *
FROM PESSOA P RIGHT JOIN MISSAO M
	ON P.CADASTRO = M.CADASTRO
WHERE P.CADASTRO IS NULL



-- SEMELHANTE AO EXEMPLO
CREATE OR REPLACE PROCEDURE EXIBE_QT_MISSOES_TIME IS QT NUMBER;
BEGIN
    SELECT COUNT(*) INTO QT FROM TIME_FAZ_MISSAO WHERE NUMERO_DO_TIME = 3;
    DBMS_OUTPUT.PUT_LINE('QUANTIDADE DE ARTIGOS: '||QT);
END;
--OU
CREATE OR REPLACE FUNCTION GET_QT_MISSOES_TIME RETURN NUMBER IS QT NUMBER;
BEGIN
    SELECT COUNT(*) INTO QT FROM TIME_FAZ_MISSAO WHERE NUMERO_DO_TIME = 3;
    RETURN QT;
END;
--OU 
CREATE OR REPLACE PROCEDURE EXIBE_QT_MISSOES_TIME(NUM IN NUMBER) IS QT NUMBER;
BEGIN
    SELECT COUNT(*) INTO QT FROM TIME_FAZ_MISSAO WHERE NUMERO_DO_TIME = NUM;
    DBMS_OUTPUT.PUT_LINE('QUANTIDADE DE ARTIGOS: '||QT);
END;
--OU
CREATE OR REPLACE FUNCTION GET_QT_MISSOES_TIME(NUM IN NUMBER) RETURN NUMBER IS QT NUMBER;
BEGIN
    SELECT COUNT(*) INTO QT FROM TIME_FAZ_MISSAO WHERE NUMERO_DO_TIME = NUM;
    RETURN QT;
END;